version: '3.8'

services:
  cassandra:
    image: cassandra:latest
    container_name: cassandra_db
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=UberPOCCluster
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis_cache
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka_broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: uber_backend
    ports:
      - "5000:5000"
    depends_on:
      cassandra:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      - CASSANDRA_HOST=cassandra
      - REDIS_HOST=redis
      - KAFKA_BROKER=kafka:9092

  consumer:
    build: ./consumer
    container_name: uber_consumer
    depends_on:
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      redis:
        condition: service_started

  simulator:
    build: ./simulator
    container_name: uber_simulator
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  cassandra_data:
  redis_data:
  kafka_data:

